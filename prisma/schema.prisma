// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Modelo de Arrendatario
model Arrendatario {
  id        String   @id @default(cuid())
  nombre    String
  email     String   @unique
  celular   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con Espacios
  espacios  Espacio[]
}

// Modelo de Espacio (Local, Consultorio, Habitación)
model Espacio {
  id                String    @id @default(cuid())
  identificador     String    @unique // Ejemplo: L-001, C-001, H-001
  tipo              TipoEspacio // Local, Consultorio, Habitación

  // Información del arriendo
  arrendatarioId    String?
  arrendatario      Arrendatario? @relation(fields: [arrendatarioId], references: [id])

  fechaInicio       DateTime?
  fechaFin          DateTime?
  monto             Float?
  montoPactado      Float?    // Monto pactado que puede diferir del monto real
  diaPago           Int? // Día del mes (1-31)
  conceptoCobro     ConceptoCobro @default(RENTA) // Tipo de cobro: RENTA, AIRBNB, OTRO
  observaciones     String?   @db.Text

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relación con cobros de arriendo
  cobrosArriendo    CobroArriendo[]
  cobros            Cobro[]

  @@index([arrendatarioId])
  @@index([tipo])
}

// Registro de cobros de arriendo (ingresos)
model CobroArriendo {
  id              String   @id @default(cuid())
  espacioId       String
  espacio         Espacio  @relation(fields: [espacioId], references: [id])

  monto           Float
  fechaCobro      DateTime // Fecha real en que se cobró
  fechaRegistro   DateTime @default(now())
  diasRetraso     Int      @default(0) // Días de diferencia respecto al día esperado
  formaPago       FormaPago?
  referencia      String?  // Número de transferencia o cheque
  observaciones   String?  @db.Text

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([espacioId])
  @@index([fechaCobro])
}

// Catálogo de servicios básicos (luz, agua, internet, etc)
model ServicioBasico {
  id              String          @id @default(cuid())
  nombre          String          // Ej: "Luz", "Agua", "Internet"
  proveedor       String?         // Empresa proveedora
  tipoMonto       TipoMontoServicio @default(VARIABLE)
  montoFijo       Float?          // Monto fijo si tipoMonto = FIJO
  diaPago         Int             // Día del mes de vencimiento (1-31)
  numeroCuenta    String?         // Número de cuenta/contrato
  activo          Boolean         @default(true)

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relación con pagos
  pagos           PagoServicio[]

  @@index([activo])
}

// Registro de pagos de servicios
model PagoServicio {
  id                String         @id @default(cuid())
  servicioBasicoId  String
  servicioBasico    ServicioBasico @relation(fields: [servicioBasicoId], references: [id])

  monto             Float
  fechaPago         DateTime
  fechaRegistro     DateTime       @default(now())
  formaPago         FormaPago?
  referencia        String?        // Número de transferencia o cheque
  comprobante       String?        // URL externa del comprobante
  observaciones     String?        @db.Text

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([servicioBasicoId])
  @@index([fechaPago])
}

// Empleados del edificio
model Empleado {
  id                String    @id @default(cuid())
  nombre            String
  celular           String
  email             String?   @unique
  cargo             String    // Función que desempeña
  salario           Float     // Salario base mensual
  diaPago           Int       // Día del mes de pago (1-31)
  fechaContratacion DateTime
  activo            Boolean   @default(true)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relación con pagos de salario
  pagosSalario      PagoSalario[]

  @@index([activo])
}

// Registro de pagos de salario a empleados
model PagoSalario {
  id            String   @id @default(cuid())
  empleadoId    String
  empleado      Empleado @relation(fields: [empleadoId], references: [id])

  periodo       String   // Formato: "2024-01" (año-mes)
  monto         Float    // Salario base
  bonos         Float    @default(0)
  descuentos    Float    @default(0)
  total         Float    // monto + bonos - descuentos
  fechaPago     DateTime
  fechaRegistro DateTime @default(now())
  formaPago     FormaPago?
  referencia    String?  // Número de transferencia o cheque
  observaciones String?  @db.Text

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([empleadoId, periodo]) // Un pago por período
  @@index([empleadoId])
  @@index([fechaPago])
}

// Otros pagos (gastos del edificio) - Sistema completo
model OtroPago {
  id                    String              @id @default(cuid())
  codigoInterno         String              @unique // G-0001, S-001, etc.

  // Información del proveedor
  proveedor             String
  ruc                   String?
  cuentaDestino         String?             // Cuenta bancaria del proveedor

  // Detalles del pago
  fechaPago             DateTime
  fechaVencimiento      DateTime?
  periodo               String              // YYYY-MM
  categoria             CategoriaPago
  monto                 Float

  // Documentación (3 columnas separadas)
  descripcion           String              @db.Text
  numeroFactura         String?             // Factura del proveedor
  numeroDocumento       String?             // Referencia de transacción bancaria

  // Ejecución del pago
  metodoPago            FormaPago
  estado                EstadoPago          @default(PENDIENTE)

  // Relación con pago recurrente (si fue auto-generado)
  pagoRecurrenteId      String?
  pagoRecurrente        PagoRecurrente?     @relation(fields: [pagoRecurrenteId], references: [id])

  // Metadata
  observaciones         String?             @db.Text
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@index([categoria])
  @@index([estado])
  @@index([fechaPago])
  @@index([periodo])
  @@index([pagoRecurrenteId])
}

// Configuración de pagos recurrentes
model PagoRecurrente {
  id                String              @id @default(cuid())
  codigoInterno     String              @unique // PR-0001, PR-0002, etc.
  nombre            String              // Nombre descriptivo
  proveedor         String
  ruc               String?
  cuentaDestino     String?             // Cuenta bancaria del proveedor
  categoria         CategoriaPago
  descripcion       String              @db.Text

  // Configuración de montos
  montoFijo         Float?              // Null si es variable
  esMontoVariable   Boolean             @default(false)
  metodoPago        FormaPago           @default(TRANSFERENCIA)

  // Configuración de recurrencia
  frecuencia        FrecuenciaPago
  diaPago           Int?                // Día del mes (1-30) para frecuencia mensual
  fechaInicio       DateTime
  fechaFin          DateTime?           // Null = indefinido
  activo            Boolean             @default(true)

  // Relación con pagos generados
  pagosGenerados    OtroPago[]

  // Metadata
  observaciones     String?             @db.Text
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([activo])
  @@index([frecuencia])
}

// Modelo de Cobro - Sistema completo de cobros (reemplaza/amplía CobroArriendo)
model Cobro {
  id                    String        @id @default(cuid())
  codigoInterno         String        @unique // P-0001, P-0002, etc. (auto-generado)
  espacioId             String
  espacio               Espacio       @relation(fields: [espacioId], references: [id])

  // Concepto del cobro
  concepto              ConceptoCobro @default(RENTA)
  conceptoPersonalizado String?       // Si concepto = OTRO, especificar aquí
  periodo               String?       // YYYY-MM (opcional para Airbnb, obligatorio para rentas)

  // Montos
  montoPagado           Float
  montoPactado          Float
  diferencia            Float         // montoPagado - montoPactado (calculado)

  // Fechas
  fechaPago             DateTime
  fechaVencimiento      DateTime
  diasDiferencia        Int?          // días entre fechaPago y fechaVencimiento (solo si pagado completo)

  // Método de pago
  metodoPago            FormaPago
  numeroComprobante     String?

  // Estado
  estado                EstadoCobro   @default(PENDIENTE)

  // Pagos parciales
  esParcial             Boolean       @default(false)
  cobroRelacionadoId    String?       // ID del cobro principal (para vincular pagos parciales)
  cobroRelacionado      Cobro?        @relation("PagosParciales", fields: [cobroRelacionadoId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  pagosParciales        Cobro[]       @relation("PagosParciales")

  // Metadata
  observaciones         String?       @db.Text
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@index([espacioId])
  @@index([concepto])
  @@index([estado])
  @@index([fechaPago])
  @@index([periodo])
  @@index([cobroRelacionadoId])
}

// Enum para tipos de espacios
enum TipoEspacio {
  LOCAL
  CONSULTORIO
  HABITACION
}

// Enum para tipo de monto de servicios
enum TipoMontoServicio {
  FIJO
  VARIABLE
}

// Enum para formas de pago
enum FormaPago {
  TRANSFERENCIA
  EFECTIVO
  CHEQUE
}

// Enum para conceptos de cobro
enum ConceptoCobro {
  RENTA
  AIRBNB
  OTRO
}

// Enum para estados de cobro
enum EstadoCobro {
  PAGADO
  PENDIENTE
  PARCIAL
}

// Enum para categorías de pagos
enum CategoriaPago {
  MANTENIMIENTO
  SERVICIOS_PUBLICOS      // Agua, luz, internet
  SERVICIOS_PERSONALES    // Empleados, contratistas
  LIMPIEZA
  HONORARIOS              // Contador, abogado, etc
  IMPUESTOS
  NOMINA                  // Salarios
  OTROS
}

// Enum para frecuencia de pagos recurrentes
enum FrecuenciaPago {
  SEMANAL
  QUINCENAL
  MENSUAL
  BIMENSUAL
  TRIMESTRAL
  ANUAL
  UNICA                   // Pago único
}

// Enum para estados de pagos
enum EstadoPago {
  PENDIENTE
  PAGADO
  VENCIDO
  CANCELADO
}

// ============================================
// SISTEMA AIRBNB
// ============================================

// Espacios Airbnb (propiedades disponibles para renta corta)
model EspacioAirbnb {
  id                String    @id @default(cuid())
  nombre            String    // Ej: "Apartamento Centro", "Habitación Azul"
  descripcion       String?   @db.Text

  // Capacidad y características
  capacidadHuespedes Int      @default(2)
  numCamas          Int       @default(1)
  numBanos          Int       @default(1)
  amenidades        String?   @db.Text // JSON string con lista de amenidades

  // Precios
  precioBaseNoche   Float     // Precio estándar por noche
  precioLimpieza    Float     @default(0)

  // Estado
  activo            Boolean   @default(true)

  // Metadata
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relaciones
  reservas          ReservaAirbnb[]
  mantenimientos    MantenimientoAirbnb[]

  @@index([activo])
}

// Huéspedes (contactos de Airbnb)
model HuespedAirbnb {
  id                String    @id @default(cuid())

  // Información personal
  nombre            String
  email             String?
  telefono          String?
  whatsapp          String?
  pais              String?

  // Calificación promedio del huésped
  calificacionPromedio Float?  @default(0)

  // Notas generales sobre el huésped
  notas             String?   @db.Text

  // Metadata
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relaciones
  reservas          ReservaAirbnb[]

  @@index([email])
  @@index([nombre])
}

// Reservas de Airbnb
model ReservaAirbnb {
  id                    String              @id @default(cuid())
  codigoReserva         String              @unique // Auto-generado: AB-0001, AB-0002

  // Relaciones principales
  espacioId             String
  espacio               EspacioAirbnb       @relation(fields: [espacioId], references: [id])

  huespedId             String
  huesped               HuespedAirbnb       @relation(fields: [huespedId], references: [id])

  // Fechas
  checkIn               DateTime
  checkOut              DateTime
  noches                Int                 // Calculado: checkOut - checkIn

  // Huéspedes
  numHuespedes          Int                 @default(1)

  // Información de la reserva
  canalReserva          CanalReserva        @default(AIRBNB)
  codigoConfirmacion    String?             // Código de confirmación de la plataforma

  // Precios
  precioTotal           Float               // Precio total acordado
  precioPorNoche        Float               // Precio por noche acordado
  precioLimpieza        Float               @default(0)
  depositoSeguridad     Float               @default(0)
  comisionPlataforma    Float               @default(0)

  // Estado de la reserva
  estadoReserva         EstadoReserva       @default(CONFIRMADA)

  // Estado de pago
  estadoPago            EstadoPagoReserva   @default(PENDIENTE)
  montoPagado           Float               @default(0)
  balancePendiente      Float               // precioTotal - montoPagado

  // Check-in / Check-out
  checkInRealizado      Boolean             @default(false)
  fechaCheckInReal      DateTime?
  checkOutRealizado     Boolean             @default(false)
  fechaCheckOutReal     DateTime?

  // Calificación y notas
  calificacionHuesped   Int?                // 1-5 estrellas
  notasReserva          String?             @db.Text // Notas durante la reserva
  notasFinales          String?             @db.Text // Notas al finalizar
  observaciones         String?             @db.Text

  // Metadata
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  // Relaciones
  abonos                AbonoReserva[]
  mantenimientos        MantenimientoAirbnb[]

  @@index([espacioId])
  @@index([huespedId])
  @@index([checkIn])
  @@index([checkOut])
  @@index([estadoReserva])
  @@index([estadoPago])
}

// Abonos/Pagos de reservas
model AbonoReserva {
  id                String          @id @default(cuid())
  reservaId         String
  reserva           ReservaAirbnb   @relation(fields: [reservaId], references: [id], onDelete: Cascade)

  monto             Float
  fechaPago         DateTime
  metodoPago        FormaPago
  referencia        String?         // Número de transferencia

  observaciones     String?         @db.Text
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([reservaId])
  @@index([fechaPago])
}

// Mantenimientos relacionados a reservas Airbnb
model MantenimientoAirbnb {
  id                String              @id @default(cuid())

  // Relaciones
  espacioId         String
  espacio           EspacioAirbnb       @relation(fields: [espacioId], references: [id])

  reservaId         String?
  reserva           ReservaAirbnb?      @relation(fields: [reservaId], references: [id], onDelete: SetNull)

  // Tipo de mantenimiento
  tipo              TipoMantenimiento
  descripcion       String              @db.Text

  // Fechas
  fechaProgramada   DateTime
  fechaCompletada   DateTime?

  // Estado
  estado            EstadoMantenimiento @default(PENDIENTE)

  // Costos
  costo             Float               @default(0)

  // Responsable
  responsable       String?

  // Metadata
  observaciones     String?             @db.Text
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([espacioId])
  @@index([reservaId])
  @@index([estado])
  @@index([fechaProgramada])
}

// ============================================
// ENUMS PARA AIRBNB
// ============================================

enum CanalReserva {
  AIRBNB
  BOOKING
  DIRECTO
  OTRO
}

enum EstadoReserva {
  PENDIENTE           // Pendiente de confirmación
  CONFIRMADA          // Confirmada
  EN_CURSO            // El huésped está actualmente en el espacio
  COMPLETADA          // Reserva finalizada
  CANCELADA           // Cancelada
}

enum EstadoPagoReserva {
  PENDIENTE
  PARCIAL
  PAGADO
  REEMBOLSADO
}

enum TipoMantenimiento {
  LIMPIEZA_PRE_ENTRADA
  LIMPIEZA_POST_SALIDA
  MANTENIMIENTO_GENERAL
  REPARACION
  REABASTECIMIENTO      // Amenidades, toallas, etc
}

enum EstadoMantenimiento {
  PENDIENTE
  EN_PROCESO
  COMPLETADO
  CANCELADO
}
