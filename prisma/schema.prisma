// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Modelo de Arrendatario
model Arrendatario {
  id        String   @id @default(cuid())
  nombre    String
  email     String   @unique
  celular   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con Espacios
  espacios  Espacio[]
}

// Modelo de Espacio (Local, Consultorio, Habitación)
model Espacio {
  id                String    @id @default(cuid())
  identificador     String    @unique // Ejemplo: L-001, C-001, H-001
  tipo              TipoEspacio // Local, Consultorio, Habitación

  // Información del arriendo
  arrendatarioId    String?
  arrendatario      Arrendatario? @relation(fields: [arrendatarioId], references: [id])

  fechaInicio       DateTime?
  fechaFin          DateTime?
  monto             Float?
  diaPago           Int? // Día del mes (1-31)
  observaciones     String?   @db.Text

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relación con cobros de arriendo
  cobrosArriendo    CobroArriendo[]

  @@index([arrendatarioId])
  @@index([tipo])
}

// Registro de cobros de arriendo (ingresos)
model CobroArriendo {
  id              String   @id @default(cuid())
  espacioId       String
  espacio         Espacio  @relation(fields: [espacioId], references: [id])

  monto           Float
  fechaCobro      DateTime // Fecha real en que se cobró
  fechaRegistro   DateTime @default(now())
  diasRetraso     Int      @default(0) // Días de diferencia respecto al día esperado
  observaciones   String?  @db.Text

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([espacioId])
  @@index([fechaCobro])
}

// Catálogo de servicios básicos (luz, agua, internet, etc)
model ServicioBasico {
  id              String          @id @default(cuid())
  nombre          String          // Ej: "Luz", "Agua", "Internet"
  proveedor       String?         // Empresa proveedora
  tipoMonto       TipoMontoServicio @default(VARIABLE)
  montoFijo       Float?          // Monto fijo si tipoMonto = FIJO
  diaPago         Int             // Día del mes de vencimiento (1-31)
  numeroCuenta    String?         // Número de cuenta/contrato
  activo          Boolean         @default(true)

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relación con pagos
  pagos           PagoServicio[]

  @@index([activo])
}

// Registro de pagos de servicios
model PagoServicio {
  id                String         @id @default(cuid())
  servicioBasicoId  String
  servicioBasico    ServicioBasico @relation(fields: [servicioBasicoId], references: [id])

  monto             Float
  fechaPago         DateTime
  fechaRegistro     DateTime       @default(now())
  comprobante       String?        // URL externa del comprobante
  observaciones     String?        @db.Text

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([servicioBasicoId])
  @@index([fechaPago])
}

// Empleados del edificio
model Empleado {
  id                String    @id @default(cuid())
  nombre            String
  celular           String
  email             String?   @unique
  cargo             String    // Función que desempeña
  salario           Float     // Salario base mensual
  diaPago           Int       // Día del mes de pago (1-31)
  fechaContratacion DateTime
  activo            Boolean   @default(true)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relación con pagos de salario
  pagosSalario      PagoSalario[]

  @@index([activo])
}

// Registro de pagos de salario a empleados
model PagoSalario {
  id            String   @id @default(cuid())
  empleadoId    String
  empleado      Empleado @relation(fields: [empleadoId], references: [id])

  periodo       String   // Formato: "2024-01" (año-mes)
  monto         Float    // Salario base
  bonos         Float    @default(0)
  descuentos    Float    @default(0)
  total         Float    // monto + bonos - descuentos
  fechaPago     DateTime
  fechaRegistro DateTime @default(now())
  observaciones String?  @db.Text

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([empleadoId, periodo]) // Un pago por período
  @@index([empleadoId])
  @@index([fechaPago])
}

// Otros pagos (impuestos, reparaciones, proveedores, etc)
model OtroPago {
  id            String   @id @default(cuid())
  descripcion   String
  categoria     String   // Ej: "Impuesto", "Reparación", "Proveedor"
  beneficiario  String?  // A quién se paga
  monto         Float
  fechaPago     DateTime
  recurrente    Boolean  @default(false)
  observaciones String?  @db.Text

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([categoria])
  @@index([fechaPago])
}

// Enum para tipos de espacios
enum TipoEspacio {
  LOCAL
  CONSULTORIO
  HABITACION
}

// Enum para tipo de monto de servicios
enum TipoMontoServicio {
  FIJO
  VARIABLE
}
